// Code generated by protoc-gen-go. DO NOT EDIT.
// source: comment.proto

package blunderlist_comment_v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CommentListRequest struct {
	ParentId             uint64   `protobuf:"varint,1,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommentListRequest) Reset()         { *m = CommentListRequest{} }
func (m *CommentListRequest) String() string { return proto.CompactTextString(m) }
func (*CommentListRequest) ProtoMessage()    {}
func (*CommentListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_749aee09ea917828, []int{0}
}

func (m *CommentListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommentListRequest.Unmarshal(m, b)
}
func (m *CommentListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommentListRequest.Marshal(b, m, deterministic)
}
func (m *CommentListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentListRequest.Merge(m, src)
}
func (m *CommentListRequest) XXX_Size() int {
	return xxx_messageInfo_CommentListRequest.Size(m)
}
func (m *CommentListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommentListRequest proto.InternalMessageInfo

func (m *CommentListRequest) GetParentId() uint64 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

type CommentQuery struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommentQuery) Reset()         { *m = CommentQuery{} }
func (m *CommentQuery) String() string { return proto.CompactTextString(m) }
func (*CommentQuery) ProtoMessage()    {}
func (*CommentQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_749aee09ea917828, []int{1}
}

func (m *CommentQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommentQuery.Unmarshal(m, b)
}
func (m *CommentQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommentQuery.Marshal(b, m, deterministic)
}
func (m *CommentQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentQuery.Merge(m, src)
}
func (m *CommentQuery) XXX_Size() int {
	return xxx_messageInfo_CommentQuery.Size(m)
}
func (m *CommentQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentQuery.DiscardUnknown(m)
}

var xxx_messageInfo_CommentQuery proto.InternalMessageInfo

func (m *CommentQuery) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CommentCreateRequest struct {
	ParentId             uint64   `protobuf:"varint,1,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Text                 string   `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommentCreateRequest) Reset()         { *m = CommentCreateRequest{} }
func (m *CommentCreateRequest) String() string { return proto.CompactTextString(m) }
func (*CommentCreateRequest) ProtoMessage()    {}
func (*CommentCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_749aee09ea917828, []int{2}
}

func (m *CommentCreateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommentCreateRequest.Unmarshal(m, b)
}
func (m *CommentCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommentCreateRequest.Marshal(b, m, deterministic)
}
func (m *CommentCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentCreateRequest.Merge(m, src)
}
func (m *CommentCreateRequest) XXX_Size() int {
	return xxx_messageInfo_CommentCreateRequest.Size(m)
}
func (m *CommentCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommentCreateRequest proto.InternalMessageInfo

func (m *CommentCreateRequest) GetParentId() uint64 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *CommentCreateRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type CommentUpdateRequest struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Text                 string   `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommentUpdateRequest) Reset()         { *m = CommentUpdateRequest{} }
func (m *CommentUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*CommentUpdateRequest) ProtoMessage()    {}
func (*CommentUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_749aee09ea917828, []int{3}
}

func (m *CommentUpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommentUpdateRequest.Unmarshal(m, b)
}
func (m *CommentUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommentUpdateRequest.Marshal(b, m, deterministic)
}
func (m *CommentUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentUpdateRequest.Merge(m, src)
}
func (m *CommentUpdateRequest) XXX_Size() int {
	return xxx_messageInfo_CommentUpdateRequest.Size(m)
}
func (m *CommentUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommentUpdateRequest proto.InternalMessageInfo

func (m *CommentUpdateRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CommentUpdateRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type CommentResponse struct {
	Id                   uint64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentId             uint64               `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Text                 string               `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	CreateTime           *timestamp.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CommentResponse) Reset()         { *m = CommentResponse{} }
func (m *CommentResponse) String() string { return proto.CompactTextString(m) }
func (*CommentResponse) ProtoMessage()    {}
func (*CommentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_749aee09ea917828, []int{4}
}

func (m *CommentResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommentResponse.Unmarshal(m, b)
}
func (m *CommentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommentResponse.Marshal(b, m, deterministic)
}
func (m *CommentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentResponse.Merge(m, src)
}
func (m *CommentResponse) XXX_Size() int {
	return xxx_messageInfo_CommentResponse.Size(m)
}
func (m *CommentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommentResponse proto.InternalMessageInfo

func (m *CommentResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CommentResponse) GetParentId() uint64 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *CommentResponse) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *CommentResponse) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func init() {
	proto.RegisterType((*CommentListRequest)(nil), "comment.blunderlist.v1.CommentListRequest")
	proto.RegisterType((*CommentQuery)(nil), "comment.blunderlist.v1.CommentQuery")
	proto.RegisterType((*CommentCreateRequest)(nil), "comment.blunderlist.v1.CommentCreateRequest")
	proto.RegisterType((*CommentUpdateRequest)(nil), "comment.blunderlist.v1.CommentUpdateRequest")
	proto.RegisterType((*CommentResponse)(nil), "comment.blunderlist.v1.CommentResponse")
}

func init() { proto.RegisterFile("comment.proto", fileDescriptor_749aee09ea917828) }

var fileDescriptor_749aee09ea917828 = []byte{
	// 389 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x5d, 0x6b, 0xe2, 0x40,
	0x14, 0x25, 0x51, 0x76, 0xd7, 0xab, 0xd9, 0x85, 0x61, 0x11, 0x89, 0x60, 0x25, 0x14, 0x2a, 0xa5,
	0xc4, 0xc6, 0xbe, 0xb5, 0x6f, 0xda, 0x22, 0x85, 0x0a, 0x36, 0xb4, 0x2f, 0xed, 0x43, 0x50, 0x73,
	0x95, 0x40, 0xbe, 0x9a, 0x99, 0x48, 0xfd, 0x15, 0xfd, 0xa3, 0xfd, 0x11, 0x25, 0x99, 0x89, 0x1a,
	0xb5, 0x98, 0xbe, 0x65, 0xee, 0xbd, 0xe7, 0x9c, 0x3b, 0xe7, 0x4c, 0x40, 0x99, 0x05, 0x9e, 0x87,
	0x3e, 0xd3, 0xc3, 0x28, 0x60, 0x01, 0xa9, 0x67, 0xc7, 0xa9, 0x1b, 0xfb, 0x36, 0x46, 0xae, 0x43,
	0x99, 0xbe, 0x34, 0xd4, 0xe6, 0x22, 0x08, 0x16, 0x2e, 0x76, 0xd3, 0xa9, 0x69, 0x3c, 0xef, 0xa2,
	0x17, 0xb2, 0x15, 0x07, 0xa9, 0x27, 0xbb, 0x4d, 0xe6, 0x78, 0x48, 0xd9, 0xc4, 0x0b, 0xf9, 0x80,
	0x66, 0x00, 0x19, 0x70, 0xde, 0x07, 0x87, 0x32, 0x13, 0xdf, 0x62, 0xa4, 0x8c, 0x34, 0xa1, 0x12,
	0x4e, 0x22, 0xf4, 0x99, 0xe5, 0xd8, 0x0d, 0xa9, 0x2d, 0x75, 0xca, 0xe6, 0x1f, 0x5e, 0xb8, 0xb7,
	0xb5, 0x16, 0xd4, 0x04, 0xe4, 0x31, 0xc6, 0x68, 0x45, 0xfe, 0x82, 0xbc, 0x9e, 0x92, 0x1d, 0x5b,
	0x1b, 0xc2, 0x7f, 0xd1, 0x1f, 0x44, 0x38, 0x61, 0x58, 0x84, 0x94, 0x10, 0x28, 0x33, 0x7c, 0x67,
	0x0d, 0xb9, 0x2d, 0x75, 0x2a, 0x66, 0xfa, 0xad, 0x5d, 0xaf, 0x89, 0x9e, 0x43, 0x7b, 0x8b, 0x68,
	0x47, 0xf0, 0x20, 0xf6, 0x43, 0x82, 0x7f, 0x02, 0x6c, 0x22, 0x0d, 0x03, 0x9f, 0xe2, 0x1e, 0x2e,
	0xb7, 0x90, 0xfc, 0xcd, 0x42, 0xa5, 0x0d, 0x29, 0xb9, 0x81, 0xea, 0x2c, 0xbd, 0x92, 0x95, 0xd8,
	0xd8, 0x28, 0xb7, 0xa5, 0x4e, 0xb5, 0xa7, 0xea, 0xdc, 0x63, 0x3d, 0xf3, 0x58, 0x7f, 0xca, 0x3c,
	0x36, 0x81, 0x8f, 0x27, 0x85, 0xde, 0x67, 0x09, 0x7e, 0x8b, 0x8d, 0x08, 0x42, 0x2d, 0xb1, 0x5b,
	0x1c, 0x29, 0x39, 0xd7, 0x0f, 0x87, 0xab, 0xef, 0x67, 0xa3, 0x9e, 0x1d, 0x99, 0xcd, 0xae, 0x7b,
	0x29, 0x91, 0x57, 0x80, 0x21, 0x66, 0x2a, 0xe4, 0xf4, 0x08, 0x30, 0x4d, 0xb3, 0x30, 0x3d, 0x99,
	0x83, 0xc2, 0xf3, 0xcd, 0xf8, 0x2f, 0x8e, 0x20, 0x73, 0xaf, 0xe1, 0x47, 0x3a, 0x3c, 0xfe, 0xa2,
	0x3a, 0xb9, 0xc7, 0x52, 0x5c, 0x67, 0x04, 0xca, 0x2d, 0xba, 0xb8, 0xd1, 0x29, 0xe6, 0x57, 0x7d,
	0x2f, 0xfe, 0xbb, 0xe4, 0xff, 0xeb, 0x8f, 0x40, 0x9d, 0x05, 0x5e, 0x0e, 0x9a, 0xd1, 0x2d, 0x8d,
	0xbe, 0x22, 0x38, 0xc6, 0x09, 0x88, 0x8e, 0xa5, 0x97, 0x96, 0x68, 0x76, 0xb7, 0x00, 0x96, 0xa8,
	0x59, 0x4b, 0x63, 0xfa, 0x2b, 0xa5, 0xbf, 0xfa, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xf7, 0xf7, 0xfe,
	0x54, 0x15, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommentClient is the client API for Comment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommentClient interface {
	ListComments(ctx context.Context, in *CommentListRequest, opts ...grpc.CallOption) (Comment_ListCommentsClient, error)
	GetComment(ctx context.Context, in *CommentQuery, opts ...grpc.CallOption) (*CommentResponse, error)
	CreateComment(ctx context.Context, in *CommentCreateRequest, opts ...grpc.CallOption) (*CommentResponse, error)
	UpdateComment(ctx context.Context, in *CommentUpdateRequest, opts ...grpc.CallOption) (*CommentResponse, error)
	DeleteComment(ctx context.Context, in *CommentQuery, opts ...grpc.CallOption) (*empty.Empty, error)
}

type commentClient struct {
	cc *grpc.ClientConn
}

func NewCommentClient(cc *grpc.ClientConn) CommentClient {
	return &commentClient{cc}
}

func (c *commentClient) ListComments(ctx context.Context, in *CommentListRequest, opts ...grpc.CallOption) (Comment_ListCommentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Comment_serviceDesc.Streams[0], "/comment.blunderlist.v1.Comment/ListComments", opts...)
	if err != nil {
		return nil, err
	}
	x := &commentListCommentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Comment_ListCommentsClient interface {
	Recv() (*CommentResponse, error)
	grpc.ClientStream
}

type commentListCommentsClient struct {
	grpc.ClientStream
}

func (x *commentListCommentsClient) Recv() (*CommentResponse, error) {
	m := new(CommentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commentClient) GetComment(ctx context.Context, in *CommentQuery, opts ...grpc.CallOption) (*CommentResponse, error) {
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, "/comment.blunderlist.v1.Comment/GetComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) CreateComment(ctx context.Context, in *CommentCreateRequest, opts ...grpc.CallOption) (*CommentResponse, error) {
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, "/comment.blunderlist.v1.Comment/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) UpdateComment(ctx context.Context, in *CommentUpdateRequest, opts ...grpc.CallOption) (*CommentResponse, error) {
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, "/comment.blunderlist.v1.Comment/UpdateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentClient) DeleteComment(ctx context.Context, in *CommentQuery, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/comment.blunderlist.v1.Comment/DeleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentServer is the server API for Comment service.
type CommentServer interface {
	ListComments(*CommentListRequest, Comment_ListCommentsServer) error
	GetComment(context.Context, *CommentQuery) (*CommentResponse, error)
	CreateComment(context.Context, *CommentCreateRequest) (*CommentResponse, error)
	UpdateComment(context.Context, *CommentUpdateRequest) (*CommentResponse, error)
	DeleteComment(context.Context, *CommentQuery) (*empty.Empty, error)
}

// UnimplementedCommentServer can be embedded to have forward compatible implementations.
type UnimplementedCommentServer struct {
}

func (*UnimplementedCommentServer) ListComments(req *CommentListRequest, srv Comment_ListCommentsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListComments not implemented")
}
func (*UnimplementedCommentServer) GetComment(ctx context.Context, req *CommentQuery) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComment not implemented")
}
func (*UnimplementedCommentServer) CreateComment(ctx context.Context, req *CommentCreateRequest) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (*UnimplementedCommentServer) UpdateComment(ctx context.Context, req *CommentUpdateRequest) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (*UnimplementedCommentServer) DeleteComment(ctx context.Context, req *CommentQuery) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}

func RegisterCommentServer(s *grpc.Server, srv CommentServer) {
	s.RegisterService(&_Comment_serviceDesc, srv)
}

func _Comment_ListComments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommentListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommentServer).ListComments(m, &commentListCommentsServer{stream})
}

type Comment_ListCommentsServer interface {
	Send(*CommentResponse) error
	grpc.ServerStream
}

type commentListCommentsServer struct {
	grpc.ServerStream
}

func (x *commentListCommentsServer) Send(m *CommentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Comment_GetComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).GetComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.blunderlist.v1.Comment/GetComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).GetComment(ctx, req.(*CommentQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.blunderlist.v1.Comment/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).CreateComment(ctx, req.(*CommentCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.blunderlist.v1.Comment/UpdateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).UpdateComment(ctx, req.(*CommentUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comment_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.blunderlist.v1.Comment/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServer).DeleteComment(ctx, req.(*CommentQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _Comment_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comment.blunderlist.v1.Comment",
	HandlerType: (*CommentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetComment",
			Handler:    _Comment_GetComment_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _Comment_CreateComment_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _Comment_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _Comment_DeleteComment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListComments",
			Handler:       _Comment_ListComments_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "comment.proto",
}
